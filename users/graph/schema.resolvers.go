package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/bottlehub/unboard/configs"
	"github.com/bottlehub/unboard/graph/model"
)

var (
	db = configs.ConnectDB()
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user, err := db.CreateUser(&input)
	return user, err
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	post, err := db.CreatePost(&input)
	return post, err
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	comment, err := db.CreateComment(&input)
	return comment, err
}

// CreateChatboard is the resolver for the createChatboard field.
func (r *mutationResolver) CreateChatboard(ctx context.Context, input model.NewChatboard) (*model.Chatboard, error) {
	chatboard, err := db.CreateChatboard(&input)
	return chatboard, err
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input model.NewMessage) (*model.Message, error) {
	message, err := db.CreateMessage(&input)
	return message, err
}

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	panic(fmt.Errorf("not implemented: CreateLink - createLink"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := db.GetUsers()
	return users, err
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts, err := db.GetPosts()
	return posts, err
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	comments, err := db.GetComments()
	return comments, err
}

// Chatboards is the resolver for the chatboards field.
func (r *queryResolver) Chatboards(ctx context.Context) ([]*model.Chatboard, error) {
	chatboard, err := db.GetChatboards()
	return chatboard, err
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context) ([]*model.Message, error) {
	messages, err := db.GetMessages()
	return messages, err
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input *model.FetchUser) (*model.User, error) {
	user, err := db.SingleUser(input.ID)
	return user, err
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, input *model.FetchPost) (*model.Post, error) {
	post, err := db.SinglePost(input.ID)
	return post, err
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, input model.FetchComment) (*model.Comment, error) {
	comment, err := db.SingleComment(input.ID)
	return comment, err
}

// Chatboard is the resolver for the chatboard field.
func (r *queryResolver) Chatboard(ctx context.Context, input model.FetchChatboard) (*model.Chatboard, error) {
	chatboard, err := db.SingleChatboard(input.ID)
	return chatboard, err
}

// Message is the resolver for the message field.
func (r *queryResolver) Message(ctx context.Context, input model.FetchMessage) (*model.Message, error) {
	message, err := db.SingleMessage(input.ID)
	return message, err
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	panic(fmt.Errorf("not implemented: Links - links"))
}

// DeleteChatboard implements MutationResolver.
func (*mutationResolver) DeleteChatboard(ctx context.Context, id string) (*model.DeleteChatboard, error) {
	panic("unimplemented")
}

// DeleteComment implements MutationResolver.
func (*mutationResolver) DeleteComment(ctx context.Context, id string) (*model.DeleteComment, error) {
	panic("unimplemented")
}

// DeleteLink implements MutationResolver.
func (*mutationResolver) DeleteLink(ctx context.Context, id string) (*model.DeleteLink, error) {
	panic("unimplemented")
}

// DeleteMessage implements MutationResolver.
func (*mutationResolver) DeleteMessage(ctx context.Context, id string) (*model.DeleteMessage, error) {
	panic("unimplemented")
}

// DeletePost implements MutationResolver.
func (*mutationResolver) DeletePost(ctx context.Context, id string) (*model.DeletePost, error) {
	panic("unimplemented")
}

// DeleteUser implements MutationResolver.
func (*mutationResolver) DeleteUser(ctx context.Context, id string) (*model.DeleteUser, error) {
	panic("unimplemented")
}

// UpdateChatboard implements MutationResolver.
func (*mutationResolver) UpdateChatboard(ctx context.Context, id string, input model.UpdateChatboard) (*model.Chatboard, error) {
	panic("unimplemented")
}

// UpdateComment implements MutationResolver.
func (*mutationResolver) UpdateComment(ctx context.Context, id string, input model.UpdateComment) (*model.Comment, error) {
	panic("unimplemented")
}

// UpdateLink implements MutationResolver.
func (*mutationResolver) UpdateLink(ctx context.Context, id string, input model.UpdateLink) (*model.Link, error) {
	panic("unimplemented")
}

// UpdateMessage implements MutationResolver.
func (*mutationResolver) UpdateMessage(ctx context.Context, id string, input model.UpdateMessage) (*model.Message, error) {
	panic("unimplemented")
}

// UpdatePost implements MutationResolver.
func (*mutationResolver) UpdatePost(ctx context.Context, id string, input model.UpdatePost) (*model.Post, error) {
	panic("unimplemented")
}

// UpdateUser implements MutationResolver.
func (*mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUser) (*model.User, error) {
	panic("unimplemented")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }

type queryResolver struct{ *Resolver }
