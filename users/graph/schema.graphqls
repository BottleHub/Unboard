# Types
type User {
  id: ID!
  username: String!
  key: String!
  timelines: [Timeline!]
  chatBoards: [Chatboard!]
  # @hasInverse(field: postedBy)
  following: [User!]
  # @hasInverse(field: followers)
  followers: [User!]
  # @hasInverse(field: following)
}

type Timeline {
  id: ID!
  postedBy: User!
  postedOn: Timeline!
  imageURL: String
  text: String
  likes: Int!
  subTimelines: [Timeline!]
  # @hasInverse(field: commentOn)
}

type Chatboard {
  id: ID!
  name: String!
  imageURL: String!
  description: String
  members: [User!]
  messages: [Message!]
  # @hasInverse(field: commentOn)
}

type Message {
  id: ID!
  text: String
  fileURL: String
  messageBy: User!
  messageOn: Chatboard!
}

type Link {
  id: ID!
  title: String!
  address: String!
  user: User!
}

type DeleteUser {
  id: String!
}

type DeleteLink {
  id: String!
}

# Enums
enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

# Inputs Fetch
input Fetch {
  id: String!
}


# Input Create
input NewUser {
  username: String!
  # @id
  name: String!
  about: String
  email: String!
  avatarImageURL: String!
  key: String!
}

input NewLink {
  title: String!
  address: String!
}

# Input Update
input UpdateUser {
  username: String
  # @id
  name: String
  about: String
  email: String
  avatarImageURL: String
  timeline: ID
  # # @hasInverse(field: postedBy)
  following: ID
  # # @hasInverse(field: followers)
  follower: ID
  # @hasInverse(field: following)
}

input UpdateLink {
  title: String
  address: String
}

# Misc
input Login {
  username: String!
  password: String!
}

input RefreshTokenInput {
  token: String!
}

# Queries and Mutations
type Query {
  # Single Queries
  user(input: Fetch!): User!
  link: Link!
}

type Mutation {
  # Create
  createUser(input: NewUser!): User!
  createLink(input: NewLink!): Link!
  # Update
  updateUser(id: ID!, input: UpdateUser!): User!
  updateLink(id: ID!, input: UpdateLink!): Link!
  # Delete
  deleteUser(id: ID!): DeleteUser!
  deleteLink(id: ID!): DeleteLink!
  # Misc
  login(input: Login!): String!
  refreshToken(input: RefreshTokenInput!): String!
}
