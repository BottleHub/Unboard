// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Chatboard struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	ImageURL    string     `json:"imageURL"`
	Description *string    `json:"description,omitempty"`
	Members     []*User    `json:"members,omitempty"`
	Messages    []*Message `json:"messages,omitempty"`
}

type DeleteLink struct {
	ID string `json:"id"`
}

type DeleteUser struct {
	ID string `json:"id"`
}

type Fetch struct {
	ID string `json:"id"`
}

type Link struct {
	ID      string `json:"id"`
	Title   string `json:"title"`
	Address string `json:"address"`
	User    *User  `json:"user"`
}

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Message struct {
	ID        string     `json:"id"`
	Text      *string    `json:"text,omitempty"`
	FileURL   *string    `json:"fileURL,omitempty"`
	MessageBy *User      `json:"messageBy"`
	MessageOn *Chatboard `json:"messageOn"`
}

type NewLink struct {
	Title   string `json:"title"`
	Address string `json:"address"`
}

type NewUser struct {
	Username       string  `json:"username"`
	Name           string  `json:"name"`
	About          *string `json:"about,omitempty"`
	Email          string  `json:"email"`
	AvatarImageURL string  `json:"avatarImageURL"`
	Key            string  `json:"key"`
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type Timeline struct {
	ID           string      `json:"id"`
	PostedBy     *User       `json:"postedBy"`
	PostedOn     *Timeline   `json:"postedOn"`
	ImageURL     *string     `json:"imageURL,omitempty"`
	Text         *string     `json:"text,omitempty"`
	Likes        int         `json:"likes"`
	SubTimelines []*Timeline `json:"subTimelines,omitempty"`
}

type UpdateLink struct {
	Title   *string `json:"title,omitempty"`
	Address *string `json:"address,omitempty"`
}

type UpdateUser struct {
	Username       *string `json:"username,omitempty"`
	Name           *string `json:"name,omitempty"`
	About          *string `json:"about,omitempty"`
	Email          *string `json:"email,omitempty"`
	AvatarImageURL *string `json:"avatarImageURL,omitempty"`
	Timeline       *string `json:"timeline,omitempty"`
	ChatBoard      *string `json:"chatBoard,omitempty"`
	Following      *string `json:"following,omitempty"`
	Follower       *string `json:"follower,omitempty"`
}

type User struct {
	ID         string       `json:"id"`
	Username   string       `json:"username"`
	Key        string       `json:"key"`
	Timelines  []*Timeline  `json:"timelines,omitempty"`
	ChatBoards []*Chatboard `json:"chatBoards,omitempty"`
	Following  []*User      `json:"following,omitempty"`
	Followers  []*User      `json:"followers,omitempty"`
}

type Status string

const (
	StatusNotStarted Status = "NOT_STARTED"
	StatusInProgress Status = "IN_PROGRESS"
	StatusCompleted  Status = "COMPLETED"
)

var AllStatus = []Status{
	StatusNotStarted,
	StatusInProgress,
	StatusCompleted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusNotStarted, StatusInProgress, StatusCompleted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
