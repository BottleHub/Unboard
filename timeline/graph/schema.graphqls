# Types
type User {
  id: ID!
  username: String!
  # @id
  name: String!
  about: String
  avatarImageURL: String!
  # @hasInverse(field: postedBy)
  following: [User]
  # @hasInverse(field: followers)
  followers: [User]
  # @hasInverse(field: following)
}

type Timeline {
  id: ID!
  postedBy: User!
  postedOn: Timeline!
  imageURL: String
  text: String
  likes: Int!
  subTimelines: [Timeline!]
  # @hasInverse(field: commentOn)
}

type DeleteTimeline {
  id: String!
}

# Enums
enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

# Inputs Fetch
input Fetch {
  id: String!
}

# Input Create
input NewTimeline {
  postedBy: String!
  postedOn: String!
  imageURL: String
  text: String
  like: Int!
}

# Input Update
input UpdateTimeline {
  name: String
  imageURL: String
  text: String
  subTimeline: String
}

# Queries and Mutations
type Query {
  # Multiple Queries
  timelinesByParent(input: Fetch!): [Timeline!]!
  timelinesByUser(input: Fetch!): [Timeline!]!
  # Single Queries
  timeline(input: Fetch!): Timeline!
}

type Mutation {
  # Create
  createTimeline(input: NewTimeline!): Timeline!
  # Update
  updateTimeline(id: ID!, input: UpdateTimeline!): Timeline!
  # Delete
  deleteTimeline(id: ID!): DeleteTimeline!
}
