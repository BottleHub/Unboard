package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"fmt"

	"github.com/bottlehub/unboard/boards/graph/model"
	"github.com/bottlehub/unboard/boards/internals/database"
)

// CreateTimeline is the resolver for the createTimeline field.
func (r *mutationResolver) CreateTimeline(ctx context.Context, input model.NewTimeline) (*model.Timeline, error) {
	panic(fmt.Errorf("not implemented: CreateTimeline - createTimeline"))
}

// UpdateTimeline is the resolver for the updateTimeline field.
func (r *mutationResolver) UpdateTimeline(ctx context.Context, id string, input model.UpdateTimeline) (*model.Timeline, error) {
	panic(fmt.Errorf("not implemented: UpdateTimeline - updateTimeline"))
}

// DeleteTimeline is the resolver for the deleteTimeline field.
func (r *mutationResolver) DeleteTimeline(ctx context.Context, id string) (*model.DeleteTimeline, error) {
	panic(fmt.Errorf("not implemented: DeleteTimeline - deleteTimeline"))
}

// TimelinesByParent is the resolver for the timelinesByParent field.
func (r *queryResolver) TimelinesByParent(ctx context.Context, input model.Fetch) ([]*model.Timeline, error) {
	panic(fmt.Errorf("not implemented: TimelinesByParent - timelinesByParent"))
}

// TimelinesByUser is the resolver for the timelinesByUser field.
func (r *queryResolver) TimelinesByUser(ctx context.Context, input model.Fetch) ([]*model.Timeline, error) {
	panic(fmt.Errorf("not implemented: TimelinesByUser - timelinesByUser"))
}

// Timeline is the resolver for the timeline field.
func (r *queryResolver) Timeline(ctx context.Context, input model.Fetch) (*model.Timeline, error) {
	panic(fmt.Errorf("not implemented: Timeline - timeline"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

var ( 
	db, _ = database.ConnectDB()
)
